---
- name: Add libraries dependencies
  apt: "name={{ item.name }} state=installed"
  with_items:
    - { name: qtcreator }
    # Google Chrome dependencies
    - { name: libindicator7, when: '"google-chrome" in user_applications' }
    - { name: libappindicator1, when: '"google-chrome" in user_applications' }
    # Battery Monitor dependencies
    - { name: python3, when: '"battery-monitor" in user_applications' }
    - { name: python3-gi, when: '"battery-monitor" in user_applications' }
    - { name: libnotify-dev, when: '"battery-monitor" in user_applications' }
    - { name: acpi, when: '"battery-monitor" in user_applications' }

- name: Add Battery Monitor repository.
  apt_repository: repo='ppa:maateen/battery-monitor'
  when: '"battery-monitor" in user_applications and ansible_distribution == "Ubuntu" and ansible_distribution_major_version < "17"'

- name: Add Google Chrome repository key
  apt_key:
    url: https://dl-ssl.google.com/linux/linux_signing_key.pub
    state: present
  when: '"google-chrome" in user_applications'

- name: Register Google Chrome repository
  apt_repository:
    repo: deb http://dl.google.com/linux/chrome/deb/ stable main
    state: present
    filename: "google-chrome-stable"
  when: '"google-chrome" in user_applications'

- name: Register KeyLocks repository
  apt_repository: repo='ppa:tsbarnes/indicator-keylock'
  when: '"indicator-keylock" in user_applications and ansible_distribution == "Ubuntu" and ansible_distribution_major_version < "17"'

- name: Allow open external links in Google Chrome
  lineinfile:
    path: "/home/{{ current_user }}/.local/share/applications/google-chrome.desktop"
    state: present
    regexp: "^Exec=/opt/google/chrome/chrome$"
    line: "Exec=/opt/google/chrome/chrome %U"
  when: '"google-chrome" in user_applications'

- name: Install extra packages for Putty
  apt: "name={{ item }} state=installed"
  with_items:
    - putty
    - putty-doc
    - putty-tools
  when: '"putty" in user_applications'

- name: Install Terminator
  apt: "name=terminator state=installed"
  when: '"terminator" in user_applications'

- name: Install Filezilla
  apt: "name=filezilla-common state=installed"
  when: '"filezilla" in user_applications'

- name: Install Vagrant plugins
  command: "vagrant plugin install {{ item }}"
  with_items: "{{ vagrant_plugins }}"
  when: 'vagrant_plugins | length > 0 '

- name: Check if Toolbox App is already installed
  find:
    paths: '/home/{{ current_user }},/usr/bin,/usr/local/bin,/opt'
    patterns: '**/jetbrains-toolbox'
  register: toolbox
  when: '"toolboxapp" in user_applications'

- name: Download Toolbox App
  get_url:
    url: 'https://download.jetbrains.com/toolbox/jetbrains-toolbox-{{ toolbox_version }}.tar.gz'
    dest: '{{ temp_directory }}/jetbrains-toolbox-{{ toolbox_version }}.tar.gz'
    checksum: '{{ toolbox_checksum }}'
    owner: '{{ current_user }}'
    group: '{{ current_user }}'
  register: toolbox_downloaded
  when: '"toolboxapp" in user_applications and toolbox.matched == 0'
  become: no

- name: Extract Toolbox App
  unarchive:
    src: '{{ temp_directory }}/jetbrains-toolbox-{{ toolbox_version }}.tar.gz'
    dest: '{{ temp_directory }}'
  notify: install toolboxapp
  when: '"toolboxapp" in user_applications and (toolbox_downloaded is defined and (toolbox_downloaded.changed == true or toolbox_downloaded.failed == false))'
  become: no

- name: Check if FZF is already installed
  stat: path="/home/{{ current_user }}/.fzf"
  register: fzf
  when: '"fzf" in user_applications'

- name: Clone FZF repository
  git:
    repo: 'https://github.com/junegunn/fzf.git'
    dest: "/home/{{ current_user }}/.fzf"
  notify: install fzf
  when: '"fzf" in user_applications and not fzf.stat.exists'
  become: no
